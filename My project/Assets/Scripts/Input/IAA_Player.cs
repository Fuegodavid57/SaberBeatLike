//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/IAA_Player.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @IAA_Player: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @IAA_Player()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IAA_Player"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""a373a31e-7ec8-45b8-bd74-e1a65c48b429"",
            ""actions"": [
                {
                    ""name"": ""FirstLine"",
                    ""type"": ""Button"",
                    ""id"": ""c4777a93-b6e2-4aca-8441-50b7e2941fef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondLine"",
                    ""type"": ""Button"",
                    ""id"": ""6dddd89c-cc3d-49e7-b70f-dfc0cd57bdec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ThirdLine"",
                    ""type"": ""Button"",
                    ""id"": ""f4d67f22-1239-439e-af30-eb732e195bed"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""96c6b65b-45d7-4da0-af5a-1dde0ceb5873"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirstLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80cc2da9-d0a2-4a20-aecc-18a10bf9c547"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3808d16b-ae9e-46c0-8bfe-dc26f1c604df"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ThirdLine"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_FirstLine = m_Player.FindAction("FirstLine", throwIfNotFound: true);
        m_Player_SecondLine = m_Player.FindAction("SecondLine", throwIfNotFound: true);
        m_Player_ThirdLine = m_Player.FindAction("ThirdLine", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_FirstLine;
    private readonly InputAction m_Player_SecondLine;
    private readonly InputAction m_Player_ThirdLine;
    public struct PlayerActions
    {
        private @IAA_Player m_Wrapper;
        public PlayerActions(@IAA_Player wrapper) { m_Wrapper = wrapper; }
        public InputAction @FirstLine => m_Wrapper.m_Player_FirstLine;
        public InputAction @SecondLine => m_Wrapper.m_Player_SecondLine;
        public InputAction @ThirdLine => m_Wrapper.m_Player_ThirdLine;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @FirstLine.started += instance.OnFirstLine;
            @FirstLine.performed += instance.OnFirstLine;
            @FirstLine.canceled += instance.OnFirstLine;
            @SecondLine.started += instance.OnSecondLine;
            @SecondLine.performed += instance.OnSecondLine;
            @SecondLine.canceled += instance.OnSecondLine;
            @ThirdLine.started += instance.OnThirdLine;
            @ThirdLine.performed += instance.OnThirdLine;
            @ThirdLine.canceled += instance.OnThirdLine;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @FirstLine.started -= instance.OnFirstLine;
            @FirstLine.performed -= instance.OnFirstLine;
            @FirstLine.canceled -= instance.OnFirstLine;
            @SecondLine.started -= instance.OnSecondLine;
            @SecondLine.performed -= instance.OnSecondLine;
            @SecondLine.canceled -= instance.OnSecondLine;
            @ThirdLine.started -= instance.OnThirdLine;
            @ThirdLine.performed -= instance.OnThirdLine;
            @ThirdLine.canceled -= instance.OnThirdLine;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnFirstLine(InputAction.CallbackContext context);
        void OnSecondLine(InputAction.CallbackContext context);
        void OnThirdLine(InputAction.CallbackContext context);
    }
}
